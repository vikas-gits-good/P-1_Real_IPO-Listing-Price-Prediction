name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'


jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Lint code
        run: echo "Linting Repository"
      
      - name: Run unit tests
        run: echo "Running unit tests"
  
  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_REGION}}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag & push Docker image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
          ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO_NAME}}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

  deployment:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_REGION}}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Stop & remove previous container
        run: |
          if docker ps -q --filter "name=ec2-instance-ipo-price-prediction-project" | grep -q .; then
            docker stop ec2-instance-ipo-price-prediction-project
            docker rm -fv ec2-instance-ipo-price-prediction-project
          else
            echo "No container to stop or remove."
          fi
        
      - name: Pull latest image
        run: |
          docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{secrets.AWS_ECR_REPO_NAME}}:latest
      
      
      - name: Run Docker image to serve users
        run: |
          docker run -d -p 8080:8080 --ipc="host" --name=ec2-instance-ipo-price-prediction-project \
            -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' \
            -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
            -e 'AWS_REGION=${{ secrets.AWS_REGION }}' \
            -e 'MONGO_DB_UN=${{ secrets.MONGO_DB_UN }}' \
            -e 'MONGO_DB_PW=${{ secrets.MONGO_DB_PW }}' \
            -e 'ANGEL_ONE_SECRET_KEY=${{ secrets.ANGEL_ONE_SECRET_KEY }}' \
            -e 'ANGEL_ONE_QR_TOKEN=${{ secrets.ANGEL_ONE_QR_TOKEN }}' \
            -e 'ANGEL_ONE_PIN=${{ secrets.ANGEL_ONE_PIN }}' \
            -e 'ANGEL_ONE_CLIENT_ID=${{ secrets.ANGEL_ONE_CLIENT_ID }}' \
            -e 'ANGEL_ONE_API_KEY=${{ secrets.ANGEL_ONE_API_KEY }}' \
            -e 'DAGSHUB_USER_TOKEN=${{ secrets.DAGSHUB_USER_TOKEN }}' \
            ${{ secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.AWS_ECR_REPO_NAME }}:latest
          docker logs ec2-instance-ipo-price-prediction-project

      - name: clean previous images and containers
        run: |
          docker system prune -f